{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\skillcrush\\\\break-into-tech\\\\react\\\\hooks\\\\useEffect-conditional-rendering\\\\src\\\\WindowWidthTracker.js\",\n  _s = $RefreshSig$();\nimport \"./styles.css\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WindowWidthTracker = () => {\n  _s();\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  useEffect(() => {\n    const trackWindowWidth = () => {\n      setWindowWidth(window.innerWidth);\n      console.log(window.innerWidth);\n    };\n\n    // the event listener on our window object creates a long running \n    // process that is outside the scope of our WindowWidthTracker \n    // component. It will keep on running whether the WindowWidthTracker\n    // component still exists or not. And with every ‘re’-toggling of \n    // the WindowWidthTracker, we create another resize event listener \n    // attached to the window object.\n    window.addEventListener(\"resize\", trackWindowWidth);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"The window is now \", windowWidth, \"px wide!\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 10\n  }, this);\n};\n_s(WindowWidthTracker, \"XPjwYFA2mnyOQTDQkTW889KQ99c=\");\n_c = WindowWidthTracker;\nexport default WindowWidthTracker;\nvar _c;\n$RefreshReg$(_c, \"WindowWidthTracker\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","WindowWidthTracker","_s","windowWidth","setWindowWidth","window","innerWidth","trackWindowWidth","console","log","addEventListener","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/skillcrush/break-into-tech/react/hooks/useEffect-conditional-rendering/src/WindowWidthTracker.js"],"sourcesContent":["import \"./styles.css\";\nimport { useState, useEffect } from \"react\";\n\nconst WindowWidthTracker = () => {\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const trackWindowWidth = () => {\n      setWindowWidth(window.innerWidth);\n      console.log(window.innerWidth);\n    };\n\n    // the event listener on our window object creates a long running \n    // process that is outside the scope of our WindowWidthTracker \n    // component. It will keep on running whether the WindowWidthTracker\n    // component still exists or not. And with every ‘re’-toggling of \n    // the WindowWidthTracker, we create another resize event listener \n    // attached to the window object.\n    window.addEventListener(\"resize\", trackWindowWidth);\n  }, []);\n\n  return <p>The window is now {windowWidth}px wide!</p>;\n};\n\nexport default WindowWidthTracker;\n"],"mappings":";;AAAA,OAAO,cAAc;AACrB,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAACQ,MAAM,CAACC,UAAU,CAAC;EAEjER,SAAS,CAAC,MAAM;IACd,MAAMS,gBAAgB,GAAGA,CAAA,KAAM;MAC7BH,cAAc,CAACC,MAAM,CAACC,UAAU,CAAC;MACjCE,OAAO,CAACC,GAAG,CAACJ,MAAM,CAACC,UAAU,CAAC;IAChC,CAAC;;IAED;IACA;IACA;IACA;IACA;IACA;IACAD,MAAM,CAACK,gBAAgB,CAAC,QAAQ,EAAEH,gBAAgB,CAAC;EACrD,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOP,OAAA;IAAAW,QAAA,GAAG,oBAAkB,EAACR,WAAW,EAAC,UAAQ;EAAA;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;AACvD,CAAC;AAACb,EAAA,CAnBID,kBAAkB;AAAAe,EAAA,GAAlBf,kBAAkB;AAqBxB,eAAeA,kBAAkB;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}